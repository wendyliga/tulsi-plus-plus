default_platform(:mac)

lane :setup do 
  create_keychain(
    name: "fastlane_match_code_sign",
    password: ENV["KEYCHAIN_PASSWORD"],
    default_keychain: is_ci,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
  )
end

lane :certificates do
  if is_ci
    match(
      type: "developer_id",
      keychain_name: "fastlane_match_code_sign",
      keychain_password: ENV["KEYCHAIN_PASSWORD"],
      readonly: true,
      verbose: true,
      output_path: './src/provisioning_profile'
    )
  else
    match(
      type: "developer_id",
      readonly: true,
      verbose: true,
      output_path: './src/provisioning_profile'
    )
  end
end

# you need to run `make build` first
lane :notorize do
  workspace_path = (sh "bazel info workspace").delete("\n")
  bazel_bin = workspace_path + "/bazel-bin"

  # code sign
  sh "codesign --verbose --force --deep --no-strict -o runtime " \
			"--sign \"#{ENV['CODESIGN_CERTIFICATE']}\" " \
			"#{bazel_bin}/Tulsi++.app/Contents/Frameworks/Sparkle.framework"

  sh "codesign --verbose --force --deep --no-strict -o runtime " \
			"--sign \"#{ENV['CODESIGN_CERTIFICATE']}\" " \
			"#{bazel_bin}/Tulsi++.app"

  # print out codesign validation
  sh "codesign --verify --deep --verbose=4 #{bazel_bin}/Tulsi++.app"

  # notorize
  notarize(
    package: "bazel-bin/Tulsi++.app",
    asc_provider: ENV["TEAM_ID"],
    print_log: true,
    verbose: true
  )

  # create zip
  sh "ditto -c -k --keepParent #{bazel_bin}/Tulsi++.app #{bazel_bin}/Tulsi++.zip"
	
  # create dmg
  sh "(#{workspace_path}/src/tools/BuildTools/create_dmg.sh #{bazel_bin}/Tulsi++.app -o #{bazel_bin}/Tulsi++.dmg)"

  # codesign dmg
  sh "codesign --verbose --force --deep --no-strict -o runtime " \
			"--sign \"#{ENV['CODESIGN_CERTIFICATE']}\" " \
			"#{bazel_bin}/Tulsi++.dmg"

  # remove previous
  sh "rm -f binary/tulsi_plus_plus.dmg"
  sh "rm -f binary/tulsi_plus_plus.zip"

  # create binary
  sh "mkdir -p #{workspace_path}/binary"
  app_version = sh "/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' #{bazel_bin}/Tulsi++.App/Contents/Info.plist"
  sh "cp -rf #{bazel_bin}/Tulsi++.zip '#{workspace_path}/binary/tulsi_plus_plus.zip'"
  sh "cp -rf #{bazel_bin}/Tulsi++.dmg '#{workspace_path}/binary/tulsi_plus_plus.dmg'"

  # create changelog html
  create_versional_changelog_html(workspace_path, app_version.delete("\n"))

  # create sha256
  sh "shasum -a 256 '#{workspace_path}/binary/tulsi_plus_plus.zip' > '#{workspace_path}/binary/tulsi_plus_plus.zip.sha256'"
  sh "shasum -a 256 '#{workspace_path}/binary/tulsi_plus_plus.dmg' > '#{workspace_path}/binary/tulsi_plus_plus.dmg.sha256'"

  # reuse latest appcast
  sh "cp '#{workspace_path}/appcast.xml' '#{workspace_path}/binary/appcast.xml'"
  
  # generate appcast
  sh "#{workspace_path}/src/tools/sparkle/generate_appcast #{workspace_path}/binary " \
    "-s #{ENV['SPARKLE_PRIVATE_KEY']} " \
    "--download-url-prefix 'https://github.com/wendyliga/tulsi-plus-plus/releases/download/#{ENV['RELEASE_VERSION']}/'"

  # move appcast.xml to root
  sh "cp -rf #{workspace_path}/binary/appcast.xml #{workspace_path}/appcast.xml"
end

def create_versional_changelog_html(workspace_path, app_version)
  app_version_with_underscore = app_version.gsub(".", "_")
  start_index = 0
  end_index = 0
  is_found = false

  file = File.open("#{workspace_path}/CHANGELOG.md")
  file_data = file.readlines.map(&:chomp)
  file_data.each_with_index do |line, index| 
    if line == "## #{app_version}" 
      start_index = index
      is_found = true 
    elsif is_found and line == "----" 
      end_index = index-1
      break
    end
  end

  if start_index != 0 and end_index != 0 and is_found
    start_index_without_header = start_index + 1
    versional_changelog_data = file_data[start_index_without_header..end_index]
    join = versional_changelog_data.join("\n")

    # write data
    out_file = File.new("#{workspace_path}/binary/tulsi_plus_plus.html", "w")
    out_file.puts(join)
    out_file.close
  end
end